#!/bin/bash

usage() {
  echo "USAGE"
  echo "  syncall [flags] <org>"
  echo
  echo "FLAGS"
  echo "  -h, --help         Show this message"
  echo "  -s, --save=<file>  Save a list of repositories to file"
  echo "  -n, --new          Only clone, no update"
  echo "  -z, --zip          Zip the repository once cloned / updated"
  echo "  -k, --keep         Keep the repository after have been zipped"
  echo
  echo "QUERY"
  echo "  If a repo flag is passed, it will take priority over auto-detect one."
}

print-inline() {
  local columes
  columes=$(tput cols)
  printf "%-${columes}s\r" "$1"
}

main() {
  local repo_file=""
  local only_clone=0
  local zip_repo=0
  local keep_repo=0
  while test "$1" != ""; do
    local param
    param=$(printf "%s" "$1" | sed 's/=.*//g')
    local value
    value=$(printf "%s" "$1" | sed 's/^[^=]*=//g')
    local equal_sign
    equal_sign=$(printf "%s" "$1" | sed 's/[^=]//g')
    case $param in
      -h | --help)
        usage
        return
        ;;
      -s | --save)
        if test -z "$equal_sign"; then
          echo "ERROR: a file path is required (perhaps missing an equal sign?)"
          return 1
        fi
        repo_file="$value"
        ;;
      -n | --new)
        only_clone=1
        ;;
      -z | --zip)
        zip_repo=1
        ;;
      -k | --keep)
        keep_repo=1
        ;;
      -*)
        echo "ERROR: unknown flag \"$1\""
        return 1
        ;;
      *)
        break
        ;;
    esac

    shift
  done

  if test "$1" = ""; then
    echo "ERROR: an organization login name is required"
    return 1
  fi

  local graph_query
  graph_query=$(cat ~/.dots/binaries/_syncall.graphql)

  local working_dir
  working_dir=$(pwd)
  local next_cursor=""
  local has_next_page="true"
  local raw_repos=""
  while test "$has_next_page" = "true"; do
    if test "$next_cursor" = ""; then
      print-inline "Fetching..."
      local response
      response=$(gh api graphql -F limit="50" -F org="$1" -f query="$graph_query")
    else
      print-inline "Fetching... $(echo "$raw_repos" | grep -c '$') found and counting..."
      local response
      response=$(gh api graphql -F limit="50" -F cursor="$next_cursor" -F org="$1" -f query="$graph_query")
    fi

    local repo_json
    repo_json=$(echo "$response" | jq -r '.data.organization.repositories')
    has_next_page=$(echo "$repo_json" | jq -r '.pageInfo.hasNextPage')
    next_cursor=$(echo "$repo_json" | jq -r '.pageInfo.endCursor')
    local new_repos
    new_repos=$(echo "$repo_json" | jq -r '.nodes | [ .[] | [ .name, .url, .sshUrl ] | join("|") ] | join("$")' | awk 'BEGIN{FS="|";RS="$";OFS="|"}{print $1,$2,$3}')
    if test "$raw_repos" = ""; then
      raw_repos=$new_repos
    else
      raw_repos=$(printf "%s\n%s" "$raw_repos" "$new_repos")
    fi
  done

  local total_repos
  total_repos=$(echo "$raw_repos" | grep -c '$')
  print-inline "Found $total_repos repositories"
  echo
  if test "$repo_file" != ""; then
    echo "$raw_repos" | awk 'BEGIN{FS="|";}{print $1,$2}' > "$repo_file"
  fi

  local current_index=0
  while read -r item; do
    local repo_name
    repo_name=$(echo "$item" | cut -d'|' -f1)
    local repo_ssh_url
    repo_ssh_url=$(echo "$item" | cut -d'|' -f3)

    local progress
    progress=$(( current_index * 100 / total_repos ))
    if test -d "$repo_name"; then
      if test $only_clone -eq 1; then
        continue
      fi

      local output
      output=$(printf "[%2d%%] Updating '%s'..." "$progress" "$repo_name")
      print-inline "$output"
      cd "$repo_name" || exit 1
      git fetch >/dev/null 2>&1
      git reset --hard origin >/dev/null 2>&1
      cd "$working_dir" || exit 1
    else
      local output
      output=$(printf "[%2d%%] Cloning '%s'..." "$progress" "$repo_name")
      print-inline "$output"
      git clone "$repo_ssh_url" "$repo_name" >/dev/null 2>&1
    fi

    if test $zip_repo -eq 1; then
      rm -f "${repo_name}.zip"

      local output
      output=$(printf "[%2d%%] Zipping '%s' into '%s'..." "$progress" "$repo_name" "${repo_name}.zip")
      print-inline "$output"

      zip -9qr "${repo_name}.zip" "$repo_name"
      if test $keep_repo -eq 0; then
        rm -rf "$repo_name"
      fi
    fi

    current_index=$(( current_index + 1 ))
  done <<< "$raw_repos"
  print-inline "All done"
  echo
}

main "$@"
