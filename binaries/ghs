#!/bin/bash

usage() {
  echo "USAGE"
  echo "  ghs [flags] <query>..."
  echo
  echo "FLAGS"
  echo "  -h, --help              Show this message"
  echo "  -L, --limit=<limit>     Maximum number of items to fetch (default 30)"
  echo "  -H, --hostname=<HOST>   Set the host for accessing its API (default to github.com)"
  echo "  -R, --repo=<OWNER/REPO> Select another repository using the OWNER/REPO format"
  echo "  -M, --manual            Disable repository auto-detection"
  echo "  -n, --next=<cursor>     Search from the cursor position forward"
  echo
  echo "QUERY"
  echo "  If a query is empty, it will default to \"is:open\"."
  echo
  echo "  A repo will be auto-detected by default, unless a manual flag is passed."
  echo
  echo "  If a repo flag is passed, it will take priority over auto-detect one."
  echo "  If a query contains a repo filter, it will take priority over the flags."
}

main() {
  local limit=30
  local repo=""
  local host=""
  local debug=0
  local cursor=""
  local manual=0
  while test "$1" != ""; do
    local param
    param=$(printf "%s" "$1" | sed 's/=.*//g')
    local value
    value=$(printf "%s" "$1" | sed 's/^[^=]*=//g')
    local equal_sign
    equal_sign=$(printf "%s" "$1" | sed 's/[^=]//g')
    case $param in
      -h | --help)
        usage
        return
        ;;
      -M | --manual)
        manual=1
        ;;
      -L | --limit)
        if test -z "$equal_sign"; then
          echo "ERROR: a limit is required (perhaps missing an equal sign?)"
          return 1
        fi
        limit=$value
        ;;
      -H | --hostname)
        if test -z "$equal_sign"; then
          echo "ERROR: a hostname is required (perhaps missing an equal sign?)"
          return 1
        fi
        host="$value"
        ;;
      -R | --repo)
        if test -z "$equal_sign"; then
          echo "ERROR: a repository is required (perhaps missing an equal sign?)"
          return 1
        fi
        repo=" repo:$value"
        ;;
      -n | --next)
        if test -z "$equal_sign"; then
          echo "ERROR: a cursor is required (perhaps missing an equal sign?)"
          return 1
        fi
        cursor=$value
        ;;
      --debug)
        debug=1
        ;;
      -*)
        echo "ERROR: unknown flag \"$1\""
        return 1
        ;;
      *)
        break
        ;;
    esac

    shift
  done

  local query="$*"
  if test -z "$query"; then
    query="is:open"
  fi
  local repo_filter
  repo_filter=$(printf "%s" "$query" | sed -n '/repo:[^ ]*/p')
  if test -n "$repo_filter"; then
    repo=""
    manual=1
  fi
  if test "$repo" = "" -a $manual -eq 0; then
    # shellcheck disable=SC1091
    source _git_helper
    local repo_owner
    repo_owner=$(get_repo_owner)
    local repo_name
    repo_name=$(get_repo_name)
    repo=" repo:$repo_owner/$repo_name"
  fi
  if test $debug -eq 1; then
    echo "[limit=$limit,cursor=$cursor] $query$repo"
    return
  fi
  # shellcheck disable=SC2016
  local graph_query='query($q:String!,$limit:Int!,$after:String){search(query:$q,type:ISSUE,first:$limit,after:$after){nodes{...on Issue{type:__typename,title,number,state},...on PullRequest{type:__typename,title,number,state}},issueCount,pageInfo{endCursor,hasNextPage}}}'
  local host_flags=""
  if test -n "$host"; then
    host_flags="--hostname $host"
  fi
  if test "$cursor" != ""; then
    # shellcheck disable=SC2086
    response=$(gh api $host_flags graphql -F limit="$limit" -F after="$cursor" -F q="$query$repo" -f query="$graph_query")
  else
    # shellcheck disable=SC2086
    response=$(gh api $host_flags graphql -F limit="$limit" -F q="$query$repo" -f query="$graph_query")
  fi
  if test $? -ne 0; then
    return 1
  fi

  echo "$response" | LIMIT="$limit" gomplate -f ~/.dots/binaries/_issue.tmpl -d 'limit=env:///LIMIT' -d 'response=stdin:///in.json'
}

main "$@"
